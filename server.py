# server.py
from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import requests
import uuid
import os
from typing import Dict
from fastapi.responses import JSONResponse
import dotenv
import json

dotenv.load_dotenv()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤
STORAGE_API_URL = os.getenv("STORAGE_API_URL")
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
def load_students_from_api() -> Dict[str, str]:
    print(STORAGE_API_URL)
    
    try:
        response = requests.get(f"{STORAGE_API_URL}/students", timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"[load_students] –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ API: {response.status_code}")
    except Exception as e:
        print(f"[load_students] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {e}")
    return {}  # –í–æ–∑–≤—Ä–∞—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –æ—à–∏–±–∫–µ


def save_students_to_api():
    try:
        response = requests.post(
           f"{STORAGE_API_URL}/students",
            json=user_tokens,
            timeout=5
        )
        if response.status_code != 200:
            print(f"[save_students] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {response.status_code}")
    except Exception as e:
        print(f"[save_students] –°–µ—Ä–≤–∏—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

app = FastAPI()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö "–∫–ª—é—á–µ–π"
  # token: name
user_tokens: Dict[str, str] = load_students_from_api()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (DeepSeek / Intelligence.io)
API_KEY = os.getenv("API_KEY")  # üîê –ù–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á
API_URL = "https://api.intelligence.io.solutions/api/v1"

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞
class RegisterRequest(BaseModel):
    name: str
    surname: str

from typing import List, Dict

class AskRequest(BaseModel):
    token: str
    model: str
    messages: List[Dict]  # –ü—Ä–∏–º–µ—Ä: [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}]

class AskModel(BaseModel):
    token: str
  
@app.post("/register")
def register_student(data: RegisterRequest):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if data.name is None or data.surname is None:
        raise HTTPException(status_code=400, detail="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã")
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    token = str(uuid.uuid4())
    full_name = f"{data.name} {data.surname}"
    user_tokens[token] = full_name
    save_students_to_api()# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    return {"token": token, "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!"}

@app.post("/models")
def fetch_models_from_deepseek(data:AskModel):
    if data.token not in user_tokens:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")
    headers = {
        "accept": "application/json",
        "Authorization": f"Bearer {API_KEY}"
    }
    response = requests.get(f"{API_URL}/models", headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        raise HTTPException(status_code=response.status_code, detail=response.text)

@app.post("/ask")
def ask_ai(data: AskRequest):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if data.token not in user_tokens:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞")

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": data.model,
        "messages": data.messages  # ‚Üê —Ç–µ–ø–µ—Ä—å –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–¥–∞—ë—Ç —É—á–µ–Ω–∏–∫
    }

    response = requests.post(f"{API_URL}/chat/completions", headers=headers, json=payload)

    if response.status_code == 200:
        ai_response = response.json()
        return {
            "student": user_tokens[data.token],
            "response": ai_response
        }
    else:
        raise HTTPException(status_code=response.status_code, detail=response.text)
TEACHER_SECRET = "teacher123"  # –ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å
#GET https://<–∞–¥—Ä–µ—Å_ngrok>/students?secret=teacher123
@app.get("/students")
def list_students(secret: str):
    if secret != TEACHER_SECRET:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    return {"registered_students": [{"name": name, "token": token} for token, name in user_tokens.items()]}

#–ó–ê–ü–£–°–ö –°–ï–†–í–ï–†
#uvicorn server:app --host 0.0.0.0 --port 8000
#ngrok http 8000
